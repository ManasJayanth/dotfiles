[user]
    name = Matthew Duck
    email = matt@mattduck.com
    editor = vim

[alias]
    s = status
    co = checkout
    cob = checkout -b
    ci = commit
    b = branch

    d = diff
    dc = diff --cached
    wd = diff --color-words
    wdc = diff --color-words --cached

    # %h   short hash
    # %s   subject
    # %cn  committer
    # %ad  date
    # %d   branch
    l = log --pretty=format:'%C(yellow)%h %C(reset)%<(65)%s %C(blue)%cn %C(green)%ad%C(auto)%d' --decorate  --graph --date=short
    ll = !git l --all
    ld = !git l --date=relative
    lp = log -p
    lpw = log -p --word-diff


    # Some useful bits here are taken from
    # http://haacked.com/archive/2014/07/28/github-flow-aliases/

    # List aliases
    md-aliases=!git config -l | grep alias | cut -c 7-

    # An alternative to stash if I just want to save WIP for this branch
    md-savepoint = !git add -A && git commit -m 'SAVEPOINT'
    md-undo = reset HEAD~1 --mixed

    # A friendly alternative to --reset HEAD --hard: commit then remove, so my
    # work stays is still accessible via reflog.
    md-wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

    # Get up to date and remove remote branches that have been deleted
    md-up = !git pull --rebase --prune $@ && git submodule update --init --recursive

    # Delete all branches that have been merged into master or given branch
    # Could do with passing --no-run-if-empty to xargs here, but that's only a
    # valid flag for GNU xargs.
    md-bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs git branch -d; }; f"

    # Checkout branch, bring it up to date with origin and delete all merged branches
    md-bdone = "!f() { git checkout ${1-master} && git md-up && git md-bclean ${1-master}; }; f"

    # Grep through all commits
    md-hgrep = "!f() { git rev-list --all | xargs git grep $@; }; f"

    # Open merge conflicts in vim tabs
    md-fix = "!f() { vim +/'<<<<<<<' -c 'redraw' -p `git diff --name-only --diff-filter=U`; }; f"

    # Temporarily ignore files
    md-ignore=update-index --assume-unchanged
    md-unignore=update-index --no-assume-unchanged
    md-ignored=!git ls-files -v | grep '^[[:lower:]]'

    md-vconfig = config --global -e
    md-vignore = !vi $DOTFILES/git/gitignore.symlink


[color]
    ui = true
    branch = auto
    diff = auto
    interactive = auto
    status = auto

[core]
    excludesfile = ~/.gitignore
