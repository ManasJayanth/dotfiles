set-option -g status-position top
set-option -g status-justify centre

# Use same prefix as gnuscreen
set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix

# Enable mouse
set -g mode-mouse on
setw -g mouse-select-window on
setw -g mouse-select-pane on
setw -g mouse-resize-pane on

# Be quiet
set -g quiet on

# I not sure why would need to wait for Esc, and it interferes with vim
set-option -sg escape-time 0

# History
set -g history-limit 50000

# Resize to smallest viewing client, not smallest attached client.
set -g aggressive-resize on

# Colours
set-option -g default-terminal "screen-256color"
col_base03=8
col_base02=0
col_base01=10
col_base00=11
col_base0=12
col_base1=14
col_base2=7
col_base3=15
col_yellow=3
col_orange=9
col_red=1
col_magenta=5
col_violet=13
col_blue=4
col_cyan=6
col_green=2

col_bg="$col_base03"
col_bg_hl="$col_base02"
col_secondary="$col_base01"
col_primary="$col_base0"
col_optional_em="$col_base1"
col_host="$HOST_COLOUR_NUM"


# Left status is session name, right is hostname + date. Highlights current
# window name.
set-option -g status-bg "colour$col_bg"
set-option -g status-fg "colour$col_primary"
set-option -g status-left "#[fg=colour$col_host]#[bg=colour$col_bg_hl] #S "
set-option -g status-right "#[fg=colour$col_bg]#[bg=colour$col_host] #H #[fg=colour$col_host]#[bg=colour$col_bg_hl] %Y-%b-%d %H:%M "

set-option -g window-status-bg "colour$col_bg"
set-option -g window-status-fg "colour$col_host"
set-option -g window-status-current-bg "colour$col_host"
set-option -g window-status-current-fg "colour$col_base2"

# Command bar colours
set-option -g message-command-bg "colour$col_orange"
set-option -g message-command-fg "colour$col_bg_hl"
set-option -g message-bg "colour$col_bg_hl"
set-option -g message-fg "colour$col_primary"

# Highlight current pane.
set-option -g pane-active-border-fg "colour$col_host"
set-option -g pane-border-fg "colour$col_secondary"

# The leftmost key should show the leftmost window.
set-option -g base-index 1
set-option -g pane-base-index 1

# vi
set-option -g status-keys vi
set-option -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind -r C-h resize-pane -L 5
bind -r C-j resize-pane -D 5
bind -r C-k resize-pane -U 5
bind -r C-l resize-pane -R 5
bind-key -t vi-copy 'v' begin-selection

# Use namespace shell wrapper to enable pbcopy and pbpaste commands on OS X.
set-option -g default-command "if command -v reattach-to-user-namespace >/dev/null; then reattach-to-user-namespace -l bash; else bash; fi"

# Tmux 1.8 has copy-pipe command, which copies selected text to the tmux paste
# buffer and pipes it to given command
bind-key -t vi-copy 'y' copy-pipe "if command -v reattach-to-user-namespace >/dev/null; then reattach-to-user-namespace pbcopy; else /dev/null; fi"

# Do the same for the default copy binding of Enter
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "if command -v reattach-to-user-namespace >/dev/null; then reattach-to-user-namespace pbcopy; else /dev/null; fi"

# Shortcut for running the fzf goto command
bind-key -r "C-p" new-window -n "goto" 'source "$DOTFILES/tmux/tmux_env.dot.sh" && ,tm-goto'

bind-key -r "C-c" new-window -c "#{pane_current_path}" ",fzf --action copy"
bind-key -r "C-v" new-window -c "#{pane_current_path}" ",fzf --action send-keys-last-window"
